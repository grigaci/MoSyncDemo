/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/**
 * @file BannerManager.h
 * @author Emma Tresanszki and Bogdan Iusco
 * @date 1 Nov 2011
 *
 * @brief The BannnerManager manages banner events and dispatches
 * them to the target banners.
 */

#ifndef ADS_BANNER_MANAGER_H_
#define ADS_BANNER_MANAGER_H_

#include <MAUtil/String.h>
#include <MAUtil/Map.h>
#include <MAUtil/Environment.h>

namespace Ads
{

	// Forward declaration.
	class Banner;

	/**
	 * @brief Class that handles banner events.
	 */
	class BannerManager : public MAUtil::CustomEventListener
	{
	public:
		/**
		 * Destructor.
		 */
		virtual ~BannerManager();

		/**
		 * Return the single instance of this class.
		 */
		static BannerManager* getInstance();

		/**
		 * Destroy the single instance of this class.
		 * Call this method only when the application will exit.
		 */
		static void destroyInstance();

		/**
		 * Implementation of CustomEventListener interface.
		 * This method will get called whenever there is a
		 * widget event generated by the system.
		 * @param event The new received event.
		 */
		virtual void customEvent(const MAEvent& event);

		/**
		 * Add a banner to the map that holds banners.
		 * The banner will receive custom events.
		 * @param banner The banner that needs to be registered.
		 * The ownership of the banner is not passed to this method.
		 */
		virtual void registerBanner(Banner* banner);

		/**
		 * Remove a banner from the map that holds banners.
		 * The banner will not receive custom events.
		 * @param banner The banner that needs to be unregistered.
		 */
		virtual void unregisterBanner(Banner* banner);

	protected:
		/**
		 * Constructor is protected since this is a singleton.
		 * (subclasses can still create instances).
		 */
		BannerManager();

	private:
		/**
		 * The single instance of this class.
		 */
		static BannerManager* sInstance;

		/**
		 * Dictionary of banners identified by banner handle.
		 */
		MAUtil::Map<MAHandle, Banner*> mBannerMap;
	};

} // namespace Ads

#endif /* ADS_BANNER_MANAGER_H_ */
