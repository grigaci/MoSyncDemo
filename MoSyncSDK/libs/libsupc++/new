// The -*- C++ -*- dynamic memory management header.

// Copyright (C) 1994, 1996, 1997, 1998, 2000, 2001 Free Software Foundation

// This file is part of GNU CC.
//
// GNU CC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
// 
// GNU CC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with GNU CC; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

/** \file new
*  This header defines several functions to manage dynamic memory and
*  handling memory allocation errors.
*/

#ifndef __NEW__
#define __NEW__

//#include <cstddef>
//#include <exception>
#include "macpp.h"

//extern "C++" {

/**
* \brief A few essential C++ declarations
*/
	namespace std
	{
		struct nothrow_t { };
		extern const nothrow_t nothrow;
#if 0	//disabled for now
		/** If you write your own error handler to be called by @c new, it must
		*  be of this type.  */
		typedef void (*new_handler)();
		/// Takes a replacement handler as the argument, returns the previous handler.
		new_handler set_new_handler(new_handler);
#endif
	} // namespace std

	//@{
	/** These are replaceable signatures:
	*  - normal single new and delete (no arguments, throw @c bad_alloc on error)
	*  - normal array new and delete (same)
	*  - @c nothrow single new and delete (take a @c nothrow argument, return
	*    @c NULL on error)
	*  - @c nothrow array new and delete (same)
	*
	*  Placement new and delete signatures (take a memory address argument,
	*  does nothing) may not be replaced by a user's program.
	*/

	void *operator new(std::size_t) throw ();
	void *operator new[](std::size_t) throw ();
	void operator delete(void *) throw();
	void operator delete[](void *) throw();
	inline void *operator new(std::size_t s, const std::nothrow_t&) { return operator new(s); }
	inline void *operator new[](std::size_t s, const std::nothrow_t&) { return operator new(s); }
	inline void operator delete(void *p, const std::nothrow_t&) { operator delete(p); }
	inline void operator delete[](void *p, const std::nothrow_t&) { operator delete(p); }

	// Default placement versions of operator new.
	inline void *operator new(std::size_t, void *place) { return place; }
	inline void *operator new[](std::size_t, void *place) { return place; }
	//@}
//} // extern "C++"

#endif
